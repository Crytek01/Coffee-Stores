import { useEffect, useState } from "react";
import { Banner } from "@common/components/banner/banner.component";
import { Card } from "@common/components/card/card.component";
import { useCoffeeStores } from "@common/contexts/coffee-stores/coffee-stores.context";
import { useLocation } from "@common/hooks/use-location/use-location.hook";
import { ICoffeeStore } from "@common/lib/coffee-stores/coffee-stores.model";
import { fetchCoffeeStores } from "@common/lib/coffee-stores/coffee-stores.service";
import Head from "next/head";
import Image from "next/image";
import { GetStaticProps, NextPage } from "next/types";

import styles from "@styles/Home.module.css";

interface IHomeProps {
  coffeeStores: ICoffeeStore[];
}

//This function will pass this props to component as static page.
export const getStaticProps: GetStaticProps = async () => {
  const coffeeStores = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores,
    },
  };
};

const Home: NextPage<IHomeProps> = (props) => {
  const {
    state: coffeeStoreState,
    dispatch: coffeeStoreDispatch,
    actions: coffeeStoreActions,
  } = useCoffeeStores();

  const [coffeeStoresError, setCoffeeStoresError] = useState<
    string | undefined
  >(undefined);

  const {
    isRequestingLocation,
    coordinates,
    errorMessage: locationErrorMessage,
    requestLocation,
  } = useLocation();

  //Used for setting up coordinates in context
  useEffect(() => {
    if (coordinates?.length) {
      coffeeStoreDispatch(coffeeStoreActions.setCoordinates(coordinates));
    }
  }, [coffeeStoreActions, coffeeStoreDispatch, coordinates]);

  const { coordinates: contextCoordinates } = coffeeStoreState;
  //Used for fetching stores and setting it up in context
  useEffect(() => {
    let isSubscribed: boolean = true;

    if (contextCoordinates) {
      fetch(
        `/api/coffee-stores/getByLocation?coordinates=${contextCoordinates}&limit=${6}`
      ).then(async (response) => {
        if (!isSubscribed) {
          return;
        }

        try {
          const responseData: Record<string, unknown> = await response.json();

          if (!response.ok) {
            return setCoffeeStoresError(responseData.message?.toString());
          }

          const stores = responseData.data as ICoffeeStore[];

          if (stores.length === 0) {
            return setCoffeeStoresError(
              "Couldn't find coffee stores near you."
            );
          }

          setCoffeeStoresError(undefined);
          coffeeStoreDispatch(coffeeStoreActions.setCoffeeStores(stores));
        } catch (error) {
          setCoffeeStoresError("Couldn't find coffee stores near you.");
        }
      });
    }

    return () => {
      isSubscribed = false;
    };
  }, [coffeeStoreActions, coffeeStoreDispatch, contextCoordinates]);

  const { coffeeStores } = coffeeStoreState;

  return (
    <>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner
          buttonText={
            isRequestingLocation
              ? "Loading restaurants near you."
              : "Click to view near coffee shops"
          }
          handleOnClick={requestLocation}
        />

        {/*Error printing */}
        {coffeeStoresError ? (
          <p>`Something went wrong: ${coffeeStoresError}`</p>
        ) : null}
        {locationErrorMessage ? (
          <p>`Something went wrong: ${locationErrorMessage}`</p>
        ) : null}

        <div className={styles.heroImage}>
          <Image
            src="/static/hero-image.png"
            alt="An illustration of a girl drinking coffee"
            width={700}
            height={400}
          />
        </div>

        {coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Stores near me</h2>
            <div className={styles.cardLayout}>
              {coffeeStores.map((store) => (
                <Card
                  key={store.fsq_id}
                  route={`/coffee-store/${store.fsq_id}`}
                  name={store.name}
                  imageSrc={store.imgUrl}
                  imageAltText={`Coffee Store image of ${store.name}`}
                  className={styles.card}
                />
              ))}
            </div>
          </div>
        )}

        {props.coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>San Jose stores</h2>
            <div className={styles.cardLayout}>
              {props.coffeeStores.map((store) => (
                <Card
                  key={store.fsq_id}
                  route={`/coffee-store/${store.fsq_id}`}
                  name={store.name}
                  imageSrc={store.imgUrl}
                  imageAltText={`Coffee Store image of ${store.name}`}
                  className={styles.card}
                />
              ))}
            </div>
          </div>
        )}
      </main>
    </>
  );
};

export default Home;
